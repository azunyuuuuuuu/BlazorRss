@using System
@using BlazorRss.Shared.Models
@using Humanizer;

@page "/feeds/"
@page "/feeds/{feedid:guid}"
@page "/feeds/{feedid:guid}/{articleid:guid}"

@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper _uriHelper
@inject BlazorRss.App.Models.ApplicationDbContext _context


<div class="ui grid container">
    <div class="ui three wide column">
        <!-- Category and Feed List -->
        <div class="ui vertical secondary fluid pointing menu">
            @foreach (var category in Categories)
            {
                <div class="item">
                    <a class="header">
                        @category.Name
                    </a>

                    <div class="menu">
                        @foreach (var feed in category.Feeds)
                        {
                            if (feed.FeedId == FeedId)
                            {
                                <a class="active item" onclick="@(e => NavigateToFeed(@feed.FeedId))">@feed.Name</a>
                            }
                            else
                            {
                                <a class="item" onclick="@(e => NavigateToFeed(@feed.FeedId))">@feed.Name</a>
                            }
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="ui five wide column">
        <!-- Article List -->
        @if(Articles == null)
        {
            <div class="ui center aligned container">No Feed loaded</div>
        }
        else
        {
            <div class="ui relaxed divided list">
                @foreach(var article in Articles)
                {
                    <div class="item" onclick="@(e => NavigateToArticle(@FeedId, @article.ArticleId))">
                        <i class="large sticky note outline middle aligned icon"></i>
                        <div class="content">
                            <a href="@article.ArticleUrl" class="header">@article.Title</a>
                            <div class="description">@article.DatePublished.Humanize()</div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <div class="ui eight wide column">
        @if (_article != null)
        {
            <div class="ui segment">
                @((MarkupString)@_article.Description)
            </div>
            <div class="ui segment">
                @((MarkupString)@_article.Content)
            </div>
        }
    </div>
</div>


@functions {
    IReadOnlyList<Category> Categories;
    IReadOnlyList<Article> Articles;

    [Parameter]
    private Guid FeedId { get; set; }
    Feed _feed;

    [Parameter]
    private Guid ArticleId { get; set; }
    Article _article;

    protected override async Task OnInitAsync()
    {
        Categories = await _context.GetAllCategoriesAsync();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (FeedId != null && FeedId != Guid.Empty)
        {
            _feed = await _context.GetFeed(FeedId);
            Articles = await _context.GetArticlesForFeed(FeedId);
        }

        if (ArticleId != null && ArticleId != Guid.Empty)
        {
            _article = await _context.Articles.FindAsync(ArticleId);
        }
    }

    void NavigateToFeed(Guid feedid)
    {
        _uriHelper.NavigateTo($"/feeds/{feedid}");
    }

    void NavigateToArticle(Guid feedid, Guid articleid)
    {
        _uriHelper.NavigateTo($"/feeds/{feedid}/{articleid}");
    }
}
